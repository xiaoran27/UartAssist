# UTF-8-BOM 解决windows下的乱码问题
# 首个非空字符仅[#st<>=]有效, 其他或空行都会被忽略
# # 注释行
# s  每个应答延时(sleep)n毫秒 默认：s100
# t 消息类型{0=string, 1-hex} 默认: t1
# s和t配置建议在最前面的两行
# < 收到的消息 或 其能唯一识别的前面部分
# > 发送的应答消息(可连续多个). 若连接后需发送应答其前不要有<即可,建议放在文首.
# = 收发消息一样
# 默认是字符串消息 如: 0105
# 字符串的回车换行结尾的消息 如: 0105\n\r
# 十六进制表示的二进制消息(忽略空格)  如: 02 30 31 30 35 03
# 十六进制的回车(0x0D)换行(0x0A)结尾的消息 如: 24 00 31 32 33 0D 0A
# #组合说明: 有效字符的个数[0,1,n]
# | <个数[] |  >个数 |  =个数 |  说明  |
# | 0 |  0 |  0 |   NA |
# | 0 |  0 |  1 |  1消息1应答  |
# | 0 |  0 |  n |  =>001  |
# | 0 |  1 |  0 |  连接立即1应答  |
# | 0 |  1 |  1 |  连接立即1应答, 1消息1应答  |
# | 0 |  1 |  n |  =>011  |
# | 0 |  n |  0 |  连接立即n应答  |
# | 0 |  n |  1 |  连接立即n应答, 1消息1应答  |
# | 0 |  n |  n | =>0n1   |
# | 1 |  0 |  0 |  NA: 1消息,后续>或=的应答  |
# | 1 |  0 |  1 |  1+1消息分别都是这1应答  |
# | 1 |  0 |  n |  =>101  |
# | 1 |  1 |  0 |  1消息1应答  |
# | 1 |  1 |  1 |  1消息1应答,1消息1应答  |
# | 1 |  1 |  n |  =>111  |
# | 1 |  n |  0 |   1消息n应答 |
# | 1 |  n |  1 |  1消息n应答,1消息1应答  |
# | 1 |  n |  n |  =>1n1  |
# | n |  0 |  0 |  NA: n消息,后续>或=的应答  |
# | n |  0 |  1 |  n+1消息分别都是这1应答  |
# | n |  0 |  n |  =>n01  |
# | n |  1 |  0 |  n消息分别都是这1应答  |
# | n |  1 |  1 |  n消息分别都是这1应答，1消息1应答  |
# | n |  1 |  n |  =>n11  |
# | n |  n |  0 |  n消息分别都是这n应答  |
# | n |  n |  1 |   n消息分别都是这n应答，1消息1应答 |
# | n |  n |  n |  =>nn1  |

# 设置消息类型和应答延时时间
t0
s1000

# 连接后需发送应答
> 欢迎连接Xxx
> Welcome come to Xxxx

= echo equal

< give me a answer
> one answer

< give me more answer
> first answer
> second answer
> ... answer
> more answer

< first question for same answer
< second question for same answer
> the same answer

< give me some Hex answer
< 16
< hex: 31 36
> 0123456789ABCDEFabcdef
> hex: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46 61 62 63 64 65 66
> hex: 30313233343536373839414243444546616263646566
